name: weather-api-dev
services:
  db-dev:
    image: postgres:17.5
    container_name: db-dev
    env_file:
      - .env.development
    volumes:
      - ./db-data/dev:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - weather-api-network-dev
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-dev:
    image: redis:8.0
    container_name: redis-dev
    env_file:
      - .env.development
    ports:
      - 6380:6379
    networks:
      - weather-api-network-dev
    volumes:
      - ./redis-data/dev:/data
    restart: always
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--maxmemory",
        "512mb",
        "--maxmemory-policy",
        "noeviction",
      ]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-dev:
    container_name: api-dev
    env_file:
      - .env.development
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-dev:5432/${POSTGRES_DB}
      - DB_HOST=db-dev
    ports:
      - 8001:8000
    networks:
      - weather-api-network-dev
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
      - ./tsconfig.json:/app/tsconfig.json
    develop:
      watch:
        - action: sync
          path: ./src
          target: ./src
          ignore:
            - node_modules/
        - action: rebuild
          path: ./package.json
    command: ["npm", "run", "dev"]

networks:
  weather-api-network-dev:
    driver: bridge
